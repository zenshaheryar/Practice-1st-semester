# -*- coding: utf-8 -*-
"""FA24-BBD-080.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DFIMTd1r10Q3jJ-XqlZsKqP6E5eCn8Ia
"""

# TOOK HELP IN SCENARIO BASED QUESTIONS FROM INTERNET
#Question 1
for x in range(1, 11):
    print(x)

#Question 2
total = 0
x = 1
while x <= 20:
    total += x
    x += 1
print("Sum of first 20 natural numbers is:", total)

#Question 3
string = input("Enter a string: ")
for char in string:
    print(char)

#Question 4
number = int(input("Enter a number to count down from: "))
while number >= 0:
    print(number)
    number -= 1

#Question 5
for x in range(1, 51):
    if x % 2 == 0:
        print(x)

#Question 6
number = int(input("Enter a number: "))
for x in range(1, 11):
    print(f"{number} x {x} = {number * x}")

#Question 7
number = int(input("Enter a positive integer: "))
factorial = 1
i = 1
while i <= number:
    factorial *= i
    i += 1
print(f"Factorial of {number} is {factorial}")

#Question 8
start = int(input("Enter the start number: "))
end = int(input("Enter the end number: "))
total = 0
for x in range(start, end + 1):
    if x % 2 != 0:
        total += i
print("Sum of all odd numbers in the range:", total)

#Question 9
for x in range(1, 101):
    if x % 3 == 0 and x % 5 == 0:
        print(x)

#Question 10
a, b = 0, 1
count = 0
while count < 10:
    print(a)
    a, b = b, a + b
    count += 1

#Question 11
num = int(input("Enter a number: "))
total = 0
while num > 0:
    total += num % 10
    num //= 10
print("Sum of digits:", total)

#Question 12
principal = float(input("Enter the principal amount: "))
rate = float(input("Enter the rate (in %): "))
time = 5
for year in range(1, time + 1):
    amount = principal * (1 + rate / 100) ** year
    interest = amount - principal
    print(f"Year {year}: Compound Interest = {interest}")

#Question 13
string = input("Enter a string: ")
reversed_string = ""
for char in string:
    reversed_string = char + reversed_string
print("Reversed string:", reversed_string)

#Question 14
numbers = list(map(int, input("Enter numbers separated by spaces: ").split()))
minimum_number, maximum_number = numbers[0], numbers[0]
for num in numbers:
    if num < minimum_number:
        minimum_number = num
    if num > maximum_number:
        maximum_number = num
print("Minimum:", minimum_number, "Maximum:", maximum_number)

#Question 15
secret_number = 7
guess = None
while guess != secret_number:
    guess = int(input("Guess the secret number: "))
    if guess < secret_number:
        print("Too low!")
    elif guess > secret_number:
        print("Too high!")
print("Congratulations! You've guessed the correct number.")

#Question 16
for num in range(10, 51):
    is_prime = True
    if num > 1:
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            print(num)

#Question 17
num = int(input("Enter a number: "))
original_num = num
reversed_num = 0
while num > 0:
    digit = num % 10
    reversed_num = reversed_num * 10 + digit
    num //= 10
if original_num == reversed_num:
    print(f"{original_num} is a palindrome.")
else:
    print(f"{original_num} is not a palindrome.")

#Question 18
inventory = {"macbook": 5, "ipad": 3, "iphone": 4}

for item, quantity in inventory.items():
    print(f"Item: {item}")
    while quantity > 0:
        print(f"Selling 1 {item}, remaining: {quantity - 1}")
        quantity -= 1
    print(f"{item} is now sold out!")

#Question 19

expenses = [160, 400, 100, 320, 450, 600, 01, 750]
budget = 5000

total_cost = 0
for expense in expenses:
    total_cost += expense

print("Total project cost:", total_cost)

covered_expenses = 0
remaining_budget = budget
i = 0

while remaining_budget > 0 and i < len(expenses):
    if remaining_budget >= expenses[i]:
        remaining_budget -= expenses[i]
        covered_expenses += 1
    else:
        break
    i += 1

print("Expenses covered by the budget:", covered_expenses)
print("Remaining budget after deductions:", remaining_budget)

#Question 20
import random

employees = ["Areeba", "Sara", "Adam", "Meeysum"]

for employee in employees:
    attended = random.choice([True, False])
    reminder_count = 0
    if not attended:
        print(f"{employee} missed the session.")
        while reminder_count < 3:
            print(f"Reminder {reminder_count + 1} sent to {employee}")
            reminder_count += 1

            if random.choice([True, False]):
                print(f"{employee} showed up after reminder {reminder_count}.")
                break
        else:
            print(f"{employee} remained absent after 3 reminders.")
    else:
        print(f"{employee} attended the session.")

#Question 21
transactions = [
    {"id": 1, "amount": 150},
    {"id": 2, "amount": 300},
    {"id": 3, "amount": 250}
]

sales_report = []

for transaction in transactions:
    confirmation = ""
    while confirmation.lower() != "y":
        print(f"Transaction {transaction['id']} with amount {transaction['amount']}")
        confirmation = input("Is this information correct? (y/n): ")
        if confirmation.lower() != "y":
            print("Please re-enter the transaction information.")
    sales_report.append(transaction)

print("Sales Report Generated:", sales_report)

#Question 22
customer_issues = ["Issue 1", "Issue 2", "Issue 3", "Issue 4", "Issue 5"]
resolved_count = 0

for issue in customer_issues[:10]:
    attempts = 0
    while attempts < 3:
        print(f"Working on {issue}, attempt {attempts + 1}")
        attempts += 1

        resolved = random.choice([True, False])
        if resolved:
            print(f"{issue} resolved in {attempts} attempts.")
            resolved_count += 1
            break
    else:
        print(f"{issue} unresolved after 3 attempts.")

#Question 23
student_scores = {"Ammar Rao": 95, "Meeysum": 85, "Adam": 88, "Areeba": 105}

for student, score in student_scores.items():
    while score > 100:
        score -= 5
    print(f"{student}'s final grade: {score}")

#Question 24
secret_password = "p@ssword!@#"
attempts = 0
logged_in = False

while attempts < 3:
    password = input("Enter password: ")
    if password == secret_password:
        print("Login successful!")
        logged_in = True
        break
    else:
        print("Incorrect password.")
        attempts += 1

if not logged_in:
    reset = input("Would you like to reset your password? (y/n): ")
    if reset.lower() == "y":
        print("Verifying reset steps...")
        for step in ["Verify phone", "Verify email"]:
            print(f"{step} verified.")
        print("Password reset successfully.")

#Question 25
books = ["Book A", "Book B", "Book C", "Book D", "Book E"]
borrowed_books = []
limit = 5

for book in books:
    if len(borrowed_books) >= limit:
        print("Borrowing limit reached.")
        break
    confirm = input(f"Do you want to borrow {book}? (y/n): ")
    while confirm.lower() != "y" and confirm.lower() != "n":
        confirm = input("Please enter 'y' or 'n': ")
    if confirm.lower() == "y":
        borrowed_books.append(book)
        print(f"{book} borrowed.")
print("Borrowed books:", borrowed_books)

#Question 26
steps_goal = 10000
total_steps = 0
steps_per_hour = []

for hour in range(1, 25):
    steps = int(input(f"Enter steps taken at hour {hour}: "))
    steps_per_hour.append(steps)
    total_steps += steps
    if total_steps >= steps_goal:
        print(f"Goal reached with {total_steps} steps!")
        break
print("Steps per hour:", steps_per_hour)
print("Total steps:", total_steps)

#Question 27 (took help from internet, we have not studied this)
students = ["Student A", "Student B", "Student C"]
late_submissions = {student: False for student in students}

for student in students:
    reminder_count = 0
    submitted = False
    while reminder_count < 3 and not submitted:
        print(f"Sending reminder {reminder_count + 1} to {student}")
        reminder_count += 1
        submitted = input(f"Has {student} submitted? (y/n): ").lower() == "y"
        if submitted:
            late_submissions[student] = True
            print(f"{student} has submitted after {reminder_count} reminders.")
    if not submitted:
        print(f"{student} did not submit after 3 reminders.")

print("Final Submission Status:", late_submissions)